// Copyright (c) 2022-present, Varun J., All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//
// 1. Redistributions of source code must retain the above copyright notice, this
//    list of conditions and the following disclaimer.
//
// 2. Redistributions in binary form must reproduce the above copyright notice,
//    this list of conditions and the following disclaimer in the documentation
//    and/or other materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its contributors
//    may be used to endorse or promote products derived from this software
//    without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
// CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
// OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// Dice rolling grammar

expr: num
commented_expr: num COMMENT?
// ^ starting node for commented rolls

// Comments are given -1 priority - only match comment if no other possibilities
COMMENT.-1: _WS? /.+/

// math and operators, PEMDAS
?num: comparison

?comparison: (comparison COMP_OPERATOR _WS?)? a_num _WS?
COMP_OPERATOR: "==" | ">=" | "<=" | "!=" | "<" | ">"

?a_num: (a_num A_OP _WS?)? m_num _WS?
A_OP: "+" | "-"

?m_num: (m_num M_OP _WS?)? u_num _WS?
M_OP: "*" | "//" | "/" | "%"

?u_num: numexpr | U_OP _WS? u_num
U_OP: "+" | "-"

// numbers
?numexpr: (dice | set | literal) _WS? ANNOTATION*

ANNOTATION: /\[.*?\]/ _WS?

literal: INTEGER | DECIMAL

// sets
?set: setexpr set_op*

set_op: SET_OPERATOR selector
SET_OPERATOR: "k" | "p"

setexpr: "(" _WS? (num (_WS? "," _WS? num)* _WS? comma? _WS?)? _WS? ")"
comma: ","

// dice
?dice: diceexpr dice_op*

dice_op: (DICE_OPERATOR | SET_OPERATOR) selector
DICE_OPERATOR: "rr" | "ro" | "ra" | "e" | "mi" | "ma"

diceexpr: INTEGER? "d" DICE_VALUE

DICE_VALUE: INTEGER | "%"

selector: [SELTYPE] INTEGER

SELTYPE: "l" | "h" | "<" | ">"

// whitespace
_WS: /[ \t\f\r\n]/+

// useful constants
%import common.INT -> INTEGER
%import common.DECIMAL
